<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>袖里乾坤</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://guozhenyi.github.io/"/>
  <updated>2020-06-23T11:47:45.067Z</updated>
  <id>https://guozhenyi.github.io/</id>
  
  <author>
    <name>guozhenyi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Lumen源码分析之门面模式</title>
    <link href="https://guozhenyi.github.io/2017/07/2017-2017-07-18-facade-pattern-in-lumen-framework.html"/>
    <id>https://guozhenyi.github.io/2017/07/2017-2017-07-18-facade-pattern-in-lumen-framework.html</id>
    <published>2017-07-18T14:57:59.000Z</published>
    <updated>2020-06-23T11:47:45.067Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目用Lumen来做接口开发，主要看重Lumen比Laravel更轻量，更适合做接口开发。</p><p>Laravel的源代码平时用的时候也经常去翻，但总有种云里雾里的感觉，主要是Laravel运用了很多设计模式，还有许多PHP的OOP特性，所以看起来略显繁复。</p><p>刚好趁着应用Lumen，就以Lumen来分析一下其所用的门面模式（Facade pattern）。</p><p>Lumen的代码比Laravel简洁很多，砍掉了很多自定义配置，还替换了路由的包，以此来获得跟快的运行速度。</p><a id="more"></a><p>从入口文件开始。</p><p>public/index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$app = <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/../bootstrap/app.php'</span>;</span><br><span class="line"></span><br><span class="line">$app-&gt;run();</span><br></pre></td></tr></table></figure><p>可以看到，入口文件只是引用了bootstrap下的app.php文件，通过返回值来看，是返回了一个对象，如此，下面就直接运行了这个对象run方法。我们再来看看bootstrap/app.php文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先引入composer提供的自动加载器</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span>.<span class="string">'/../vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析并注入配置信息</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    (<span class="keyword">new</span> Dotenv\Dotenv(<span class="keyword">__DIR__</span>.<span class="string">'/../'</span>))-&gt;load();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Dotenv\<span class="keyword">Exception</span>\InvalidPathException $e) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Application就是整个框架的核心，也是一个容器，里面保存有整个框架的很多实例对象</span></span><br><span class="line"><span class="comment"> * 我们通过 app()  app()-&gt;make() 获得对象都是从这里来的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$app = <span class="keyword">new</span> Laravel\Lumen\Application(</span><br><span class="line">    realpath(<span class="keyword">__DIR__</span>.<span class="string">'/../'</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入门面模式，默认没开启，也是为了提升运行速度，不过个人觉得开启的话方便些</span></span><br><span class="line"><span class="comment">// $app-&gt;withFacades();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入ORM，也就是对象关系映射，Models类映射到数据库表进行操作，会影响运行速度，个人还是习惯用DB操作去实现业务逻辑，很少用ORM，所以就不开启</span></span><br><span class="line"><span class="comment">// $app-&gt;withEloquent();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 单例模式 注入异常处理类，所以用Lumen可以直接抛出异常，由Lumen框架的这个类统一处理</span></span><br><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Debug\ExceptionHandler::class,</span><br><span class="line">    App\Exceptions\Handler::class</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单例模式 注入命令行运行所需类</span></span><br><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Console\Kernel::class,</span><br><span class="line">    App\Console\Kernel::class</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间件</span></span><br><span class="line"><span class="comment">// $app-&gt;middleware([</span></span><br><span class="line"><span class="comment">//    App\Http\Middleware\ExampleMiddleware::class</span></span><br><span class="line"><span class="comment">// ]);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由中间件</span></span><br><span class="line"><span class="comment">// $app-&gt;routeMiddleware([</span></span><br><span class="line"><span class="comment">//     'auth' =&gt; App\Http\Middleware\Authenticate::class,</span></span><br><span class="line"><span class="comment">// ]);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一些ServiceProvider</span></span><br><span class="line"><span class="comment">// $app-&gt;register(App\Providers\AppServiceProvider::class);</span></span><br><span class="line"><span class="comment">// $app-&gt;register(App\Providers\AuthServiceProvider::class);</span></span><br><span class="line"><span class="comment">// $app-&gt;register(App\Providers\EventServiceProvider::class);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 这里就是读取路由文件里定义的路由列表，保存到Application对象中</span></span><br><span class="line"><span class="comment"> * 后续就会开始处理http请求，从路由列表中匹配去运行相应的控制器方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$app-&gt;group([<span class="string">'namespace'</span> =&gt; <span class="string">'App\Http\Controllers'</span>], <span class="function"><span class="keyword">function</span> <span class="params">($app)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/../routes/web.php'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $app;</span><br></pre></td></tr></table></figure><p>大致介绍了一下Lumen的加载过程，本次我们主要看Lumen里的门面模式</p><p>就是下面这句代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$app-&gt;withFacades();</span><br></pre></td></tr></table></figure></p><p>我们可以跟进去看看代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register the facades for the application.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  bool  $aliases</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  array $userAliases</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">withFacades</span><span class="params">($aliases = true, $userAliases = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Facade::setFacadeApplication(<span class="keyword">$this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($aliases) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;withAliases($userAliases);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，此方法做了两件事：<br>把 Application 对象注入Facade类<br>执行 withAliases() 方法</p><p>我们再来看看withAliases() 干了啥事<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register the aliases for the application.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  array  $userAliases</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">withAliases</span><span class="params">($userAliases = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $defaults = [</span><br><span class="line">        <span class="string">'Illuminate\Support\Facades\Auth'</span> =&gt; <span class="string">'Auth'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Support\Facades\Cache'</span> =&gt; <span class="string">'Cache'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Support\Facades\DB'</span> =&gt; <span class="string">'DB'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Support\Facades\Event'</span> =&gt; <span class="string">'Event'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Support\Facades\Gate'</span> =&gt; <span class="string">'Gate'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Support\Facades\Log'</span> =&gt; <span class="string">'Log'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Support\Facades\Queue'</span> =&gt; <span class="string">'Queue'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Support\Facades\Schema'</span> =&gt; <span class="string">'Schema'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Support\Facades\URL'</span> =&gt; <span class="string">'URL'</span>,</span><br><span class="line">        <span class="string">'Illuminate\Support\Facades\Validator'</span> =&gt; <span class="string">'Validator'</span>,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">static</span>::$aliasesRegistered) &#123;</span><br><span class="line">        <span class="keyword">static</span>::$aliasesRegistered = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        $merged = array_merge($defaults, $userAliases);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ($merged <span class="keyword">as</span> $original =&gt; $alias) &#123;</span><br><span class="line">            class_alias($original, $alias);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>哦，原来是定义了一些别名，门面模式的目的就是简化、方便使用<br>这里就定义了一个门面列表，有常用的DB、Schema、Log等</p><p>到这里肯定是还不够的，我们只是看到了表象，还不知道其内部到底是如何实现的，我们继续翻源码</p><p>先拿DB来举例，通过这里的别名列表我们知道DB实际上映射到了 Illuminate\Support\Facades\DB</p><p>打开这个文件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> \Illuminate\Database\DatabaseManager</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> \Illuminate\Database\Connection</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DB</span> <span class="keyword">extends</span> <span class="title">Facade</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the registered name of the component.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFacadeAccessor</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'db'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>瞬间懵了，什么鬼，就一个方法，还是只返回一个’db’字符串的方法，接着找</p><p>我们看到这个类继承了Facade类，so，我们继续翻看Facade的代码</p><p>Facade类里也没有DB::table()这种方法，但是，我们找到了魔术方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span><span class="params">($method, $args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $instance = <span class="keyword">static</span>::getFacadeRoot();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! $instance) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">'A facade root has not been set.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (count($args)) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> $instance-&gt;$method();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> $instance-&gt;$method($args[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> $instance-&gt;$method($args[<span class="number">0</span>], $args[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> $instance-&gt;$method($args[<span class="number">0</span>], $args[<span class="number">1</span>], $args[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">return</span> $instance-&gt;$method($args[<span class="number">0</span>], $args[<span class="number">1</span>], $args[<span class="number">2</span>], $args[<span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> call_user_func_array([$instance, $method], $args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个魔术方法会调用 getFacadeRoot() 获得实例，我们跟进去看看</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFacadeRoot</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static</span>::resolveFacadeInstance(<span class="keyword">static</span>::getFacadeAccessor());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFacadeAccessor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">'Facade does not implement getFacadeAccessor method.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveFacadeInstance</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_object($name)) &#123;</span><br><span class="line">        <span class="keyword">return</span> $name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">static</span>::$resolvedInstance[$name])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static</span>::$resolvedInstance[$name];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static</span>::$resolvedInstance[$name] = <span class="keyword">static</span>::$app[$name];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点就是这三个方法了，首先调用getFacadeAccessor()，我们看到在这里是抛出异常，但是这个方法我们在DB里看到被重写了，返回了要给’db’字符串</p><p>然后调用resolveFacadeInstance()，传进来一个’db’字符串，我们看到代码里，首先看Facade里有没有存储这个实例，没有的话就去Application对象里去拿实例，so，这里也可以知道Application已经保存了所有Facade需要的实例。</p><p>返回实例以后，看上面的魔术方法，就会去调用此实例相应的方法，到这里，门面模式的运行过程就剖析完了。</p><p>我们也得出个结论，Application类是Lumen框架的核心，保存了所有用过的实例，这样我们就不用每次都去new Class()，只需要app() app()-&gt;make()，获得实例即可。</p><p>这里也看得出来，启用了门面模式，用起来比较方便，稍微牺牲了一点性能，具体性能却没有测试过，这就看开发的时候如何取舍了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近项目用Lumen来做接口开发，主要看重Lumen比Laravel更轻量，更适合做接口开发。&lt;/p&gt;
&lt;p&gt;Laravel的源代码平时用的时候也经常去翻，但总有种云里雾里的感觉，主要是Laravel运用了很多设计模式，还有许多PHP的OOP特性，所以看起来略显繁复。&lt;/p&gt;
&lt;p&gt;刚好趁着应用Lumen，就以Lumen来分析一下其所用的门面模式（Facade pattern）。&lt;/p&gt;
&lt;p&gt;Lumen的代码比Laravel简洁很多，砍掉了很多自定义配置，还替换了路由的包，以此来获得跟快的运行速度。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Lumen" scheme="https://guozhenyi.github.io/tags/Lumen/"/>
    
  </entry>
  
  <entry>
    <title>怎样在JSON字符串中不转码Unicode字符</title>
    <link href="https://guozhenyi.github.io/2015/06/2015-2015-06-16-how-to-unescape-unicode-with-json-on-php.html"/>
    <id>https://guozhenyi.github.io/2015/06/2015-2015-06-16-how-to-unescape-unicode-with-json-on-php.html</id>
    <published>2015-06-16T02:34:30.000Z</published>
    <updated>2020-06-23T11:47:45.065Z</updated>
    
    <content type="html"><![CDATA[<p>对于JSON的编码和解码已经足够方便，几乎在各种编程语言之中都已经实现。在PHP之中，有json_encode 和 json_decode 函数实现。</p><p>但是有一个问题，json_encode 在编码时，会把中文字符编码为Unicode字符。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$arr = <span class="keyword">array</span>(<span class="string">'test'</span>=&gt;<span class="string">'测试'</span>);</span><br><span class="line">$str = json_encode($arr);</span><br><span class="line"><span class="keyword">echo</span> $str;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"test"</span>:<span class="string">"\u6d4b\u8bd5"</span>&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>因此，先用urlencode编码字符串值，再json_encode编码成JSON，最后用urldecode解码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">string_urlencode</span><span class="params">(&amp;$value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(is_string($value))&#123;</span><br><span class="line">        $value = urlencode($value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="string">'test'</span>=&gt;<span class="string">'测试'</span>);</span><br><span class="line">array_walk_recursive($arr, <span class="string">'string_urlencode'</span>);</span><br><span class="line">$str = json_encode($arr);</span><br><span class="line"><span class="keyword">echo</span> urldecode($str);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"test"</span>:<span class="string">"测试"</span>&#125;</span><br></pre></td></tr></table></figure><p>那么问题来了，如果key/value 中的值有特殊字符，比如双引号，回车符，换行符等的时候，用上面这种方法转换出的字符串就不能正常解析为JSON字符串。</p><p>解决办法一：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">string_urlencode</span><span class="params">(&amp;$value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(is_string($value))&#123;</span><br><span class="line">        $value = mysql_escape_string($value); <span class="comment">// 转义</span></span><br><span class="line">        $value = urlencode($value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="string">'test'</span>=&gt;<span class="string">'测"试'</span>.PHP_EOL.<span class="string">'换行'</span>);</span><br><span class="line">array_walk_recursive($arr, <span class="string">'string_urlencode'</span>);</span><br><span class="line">$str = json_encode($arr);</span><br><span class="line"><span class="keyword">echo</span> urldecode($str);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"test"</span>:<span class="string">"测\"试\r\n换行"</span>&#125;</span><br></pre></td></tr></table></figure><p>这是我首先想到的解决办法。但是mysql_escape_string是MySQL的专用函数，不可靠，所以又想换成addslashes函数，却没有成功</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">string_urlencode</span><span class="params">(&amp;$value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(is_string($value))&#123;</span><br><span class="line">        $value = addslashes($value); <span class="comment">// 错误</span></span><br><span class="line">        $value = urlencode($value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="string">'test'</span>=&gt;<span class="string">'测"试'</span>.PHP_EOL.<span class="string">'换行'</span>);</span><br><span class="line">array_walk_recursive($arr, <span class="string">'string_urlencode'</span>);</span><br><span class="line">$str = json_encode($arr);</span><br><span class="line"><span class="keyword">echo</span> urldecode($str);</span><br></pre></td></tr></table></figure><p>于是查了下php手册，addslashes只能转义 ‘ “ \ null 四种字符</p><p>mysql_escape_string 转义的字符会更多，多了\r \n 和另一个Control-Z 字符，别问我Control-Z是什么，你可以参考<a href="http://www.cnblogs.com/suihui/archive/2012/09/20/2694751.html" target="_blank" rel="noopener">这里</a></p><p>so， 上面的代码改一下</p><p>解决办法二：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">string_urlencode</span><span class="params">(&amp;$value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(is_string($value))&#123;</span><br><span class="line">        $value = addslashes($value);</span><br><span class="line">        $value = str_replace(</span><br><span class="line">                    <span class="keyword">array</span>(chr(<span class="number">13</span>),chr(<span class="number">10</span>)),</span><br><span class="line">                    <span class="keyword">array</span>(<span class="string">'\r'</span>,<span class="string">'\n'</span>),</span><br><span class="line">                    $value</span><br><span class="line">                 );</span><br><span class="line">        $value = urlencode($value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="string">'test'</span>=&gt;<span class="string">'测"试'</span>.PHP_EOL.<span class="string">'换\行'</span>);</span><br><span class="line">array_walk_recursive($arr, <span class="string">'string_urlencode'</span>);</span><br><span class="line">$str = json_encode($arr);</span><br><span class="line"><span class="keyword">echo</span> urldecode($str);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"test"</span>:<span class="string">"测\"试\r\n换\\行"</span>&#125;</span><br></pre></td></tr></table></figure><p>当然，因为<a href="http://json.org/json-zh.html" target="_blank" rel="noopener">JSON</a>的规则是确定的，并且对于哪些字符需要转义也是确定的。<br>so，我们可以更极端一点，干脆不用addslashes函数，自己把所有的特殊字符转义了</p><p>解决办法三：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">string_urlencode</span><span class="params">(&amp;$value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(is_string($value))&#123;</span><br><span class="line">        $value = str_replace(</span><br><span class="line">                    <span class="keyword">array</span>(<span class="string">'\\'</span>,<span class="string">'"'</span>,<span class="string">'/'</span>,chr(<span class="number">8</span>),chr(<span class="number">12</span>),chr(<span class="number">13</span>),chr(<span class="number">10</span>),chr(<span class="number">9</span>)),</span><br><span class="line">                    <span class="keyword">array</span>(<span class="string">'\\\\'</span>,<span class="string">'\"'</span>,<span class="string">'\/'</span>,<span class="string">'\b'</span>,<span class="string">'\f'</span>,<span class="string">'\r'</span>,<span class="string">'\n'</span>,<span class="string">'\t'</span>),</span><br><span class="line">                    $value</span><br><span class="line">                 );</span><br><span class="line">        $value = urlencode($value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$arr = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'test'</span>=&gt;<span class="string">'测"试'</span>.PHP_EOL.<span class="string">'换'</span>.chr(<span class="number">8</span>).<span class="string">'行'</span>.chr(<span class="number">12</span>).<span class="string">'制'</span>.chr(<span class="number">9</span>).<span class="string">'表'</span>.<span class="string">'\\ha'</span></span><br><span class="line">        );</span><br><span class="line">array_walk_recursive($arr, <span class="string">'string_urlencode'</span>);</span><br><span class="line">$str = json_encode($arr);</span><br><span class="line"><span class="keyword">echo</span> urldecode($str);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;test&quot;:&quot;测\&quot;试\r\n换\b行\f制\t表\\ha&quot;&#125;</span><br></pre></td></tr></table></figure><p>解决办法四：<br>php5.4版本开始已经提供了原生的解决办法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$arr = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'test'</span>=&gt;<span class="string">'测"试'</span>.PHP_EOL.<span class="string">'换'</span>.chr(<span class="number">8</span>).<span class="string">'行'</span>.chr(<span class="number">12</span>).<span class="string">'制'</span>.chr(<span class="number">9</span>).<span class="string">'表'</span>.<span class="string">'\\ha'</span></span><br><span class="line">        );</span><br><span class="line">$str = json_encode($arr, JSON_UNESCAPED_UNICODE);</span><br><span class="line"><span class="keyword">echo</span> $str;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;test&quot;:&quot;测\&quot;试\r\n换\b行\f制\t表\\ha&quot;&#125;</span><br></pre></td></tr></table></figure><p>总结分析：<br>办法一： 方便实用，但是 mysql_escape_string 函数在未来php版本可能被移除（后记：在php7中已经移除）<br>办法二： 比较简单，够用<br>办法三： 强迫症+深究型比较喜欢的方式，很够显比格？<br>办法四： 部署环境必须要PHP的版本在5.4及以上</p><p>但是客观的说，如果环境允许，选择第四种，其次二三择其一，最次选择第一种。</p><p>End–</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于JSON的编码和解码已经足够方便，几乎在各种编程语言之中都已经实现。在PHP之中，有json_encode 和 json_decode 函数实现。&lt;/p&gt;
&lt;p&gt;但是有一个问题，json_encode 在编码时，会把中文字符编码为Unicode字符。&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$arr = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&#39;测试&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$str = json_encode($arr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $str;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;span class=&quot;attr&quot;&gt;&quot;test&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;\u6d4b\u8bd5&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="php" scheme="https://guozhenyi.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>怎样定义js类</title>
    <link href="https://guozhenyi.github.io/2015/06/2015-2015-06-11-how-to-define-js-class.html"/>
    <id>https://guozhenyi.github.io/2015/06/2015-2015-06-11-how-to-define-js-class.html</id>
    <published>2015-06-11T02:05:55.000Z</published>
    <updated>2020-06-23T11:47:45.063Z</updated>
    
    <content type="html"><![CDATA[<p>要解决的问题：<br>遇到要用js解析数据，并填充网页，如果过程式的写js，会很容易导致变量冲突，而且不利于迁移和维护，但是对于js的OOP编程几乎一窍不通，不过OOP的思想总归是和其他语言相通的，经过查找资料，和自己的摸索，此文主要记录摸索过程，通过实践验证理论。</p><a id="more"></a><h3 id="js类的定义"><a href="#js类的定义" class="headerlink" title="js类的定义"></a>js类的定义</h3><p>首先，我们不看广告，看疗效。<br>简单看看定义js类的方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Util</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> help = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br></pre></td></tr></table></figure><pre>Util 既是函数，有可以是一个类，因为js里面函数和类的定义方式相同。help 是另一种定义函数的方式。obj 定义了一个对象。</pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ObjAAA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> _a1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>._a2 = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// console.log('construct');</span></span><br><span class="line">    <span class="comment">// console.log('inner a1 ' + _a1);</span></span><br><span class="line">    <span class="comment">// console.log('inner a2 ' + this._a2);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.fn3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _a1;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> fn4 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn5</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aaa = <span class="keyword">new</span> ObjAAA();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'aaa.a1 '</span> + aaa._a1 );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'aaa.a2 '</span> + aaa._a2 );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'aaa.fn3 '</span> + aaa.fn3() );</span><br><span class="line"><span class="comment">// console.log( 'ObjAAA.fn3 ' + ObjAAA.fn3() );</span></span><br><span class="line"><span class="comment">// console.log( 'aaa.fn4 ' + aaa.fn4() );</span></span><br><span class="line"><span class="comment">// console.log( 'aaa.fn5 ' + aaa.fn5() );</span></span><br><span class="line"><span class="comment">// console.log( 'ObjAAA.fn5 ' + ObjAAA.fn5() );</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'--------------'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dddd = &#123;</span><br><span class="line">    <span class="string">'a'</span>:<span class="number">1</span>,</span><br><span class="line">    b:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.a;</span><br><span class="line">    &#125;,</span><br><span class="line">    cc:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'111'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    dd:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'222'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'dddd.a '</span> + dddd.a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'dddd.b '</span> + dddd.b());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'dddd.cc '</span> + dddd.cc());</span><br><span class="line">dddd.dd();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'--------------'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//self(self被附加到了对象上) self只对私有成员可见(能.点出来 i aa() .点不出来public_dd())</span></span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>.i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.aa = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.i ++;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> private_bb = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(self.i);</span><br><span class="line">        <span class="comment">//self.public_dd();//错误 self无法从外部访问,同时self也无法被这个对象的公共方法所访问</span></span><br><span class="line">        <span class="comment">//aa();//错误  私有方法要通过self调用</span></span><br><span class="line">        public_dd();<span class="comment">//可以直接调用 不能用self.public_dd();</span></span><br><span class="line">        self.aa();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.cc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        private_bb();<span class="comment">//私有函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以直接调用</span></span><br><span class="line">    <span class="comment">//  对象的公共方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">public_dd</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        self.aa();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"dd"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// var o = new Class1();//调用Class1构造函数不运行++(初始化没有调用不运行)</span></span><br><span class="line"><span class="comment">// o.cc();//运行++</span></span><br><span class="line"><span class="comment">// document.write(o.i);//return 2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要解决的问题：&lt;br&gt;遇到要用js解析数据，并填充网页，如果过程式的写js，会很容易导致变量冲突，而且不利于迁移和维护，但是对于js的OOP编程几乎一窍不通，不过OOP的思想总归是和其他语言相通的，经过查找资料，和自己的摸索，此文主要记录摸索过程，通过实践验证理论。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://guozhenyi.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>hello blog</title>
    <link href="https://guozhenyi.github.io/2015/05/2015-2015-05-23-hello-blog.html"/>
    <id>https://guozhenyi.github.io/2015/05/2015-2015-05-23-hello-blog.html</id>
    <published>2015-05-23T13:30:19.000Z</published>
    <updated>2020-06-23T11:47:45.061Z</updated>
    
    <content type="html"><![CDATA[<p>我也要开始写博客了，以我的方式</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>对于写博客，我定了几个标准：</p><ol><li>写作高效</li><li>解析灵活</li><li>维护方便</li></ol><a id="more"></a><p>写作之中，排版是硬伤，打乱思路不说，还可能本末倒置，把精力放了太多在非关键的地方。markdown语法解决问题</p><p>样式排版可以定制，连开发语言都可以多重选择，毕竟纯文本，要解析成什么样子都可以。</p><p>如果每天都要去维护，那还有什么多余心思去写作呢。</p><h2 id="构思"><a href="#构思" class="headerlink" title="构思"></a>构思</h2><p>用一门广泛使用的语言做后端，当然最好是php，因为一般的虚拟主机都支持php，写一个轻量级的程序，只要传入纯文本，即可自动生成静态的文章。</p><p>大部分和写作无关的工作都在服务端。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我也要开始写博客了，以我的方式&lt;/p&gt;
&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;对于写博客，我定了几个标准：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;写作高效&lt;/li&gt;
&lt;li&gt;解析灵活&lt;/li&gt;
&lt;li&gt;维护方便&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
